{"version":3,"sources":["index.js"],"names":["App","props","state","mainText","example","newText","this","setState","className","TextEdit","text","update","updateText","bind","TextPreview","React","Component","textEdit","target","document","getElementById","style","height","scrollHeight","updateHeight","e","value","id","resize","outline","padding","overflow","onChange","updateTextHandler","t","innerHTML","marked","minHeight","EXAMPLE","join","ReactDOM","render"],"mappings":"+PAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGDC,MAAQ,CACXC,SAAUF,EAAMG,SALD,E,wEASRC,GACTC,KAAKC,SAAS,CAAEJ,SAAUE,M,+BAI1B,OACE,yBAAKG,UAAU,OACb,kBAACC,EAAD,CACEC,KAAMJ,KAAKJ,MAAMC,SACjBQ,OAAQL,KAAKM,WAAWC,KAAKP,QAE/B,kBAACQ,EAAD,CAAaJ,KAAMJ,KAAKJ,MAAMC,gB,GArBpBY,IAAMC,WA8BlBP,E,YACJ,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAGDC,MAAQ,CACXe,SAAU,EAAKhB,MAAMS,MALN,E,4EAcjB,IAAIQ,EAASC,SAASC,eAAe,YACrCF,EAAOG,MAAMC,OAAS,QACtBJ,EAAOG,MAAMC,OAASJ,EAAOK,aAAe,O,0CAO5CjB,KAAKkB,iB,wCAQWC,GAChB,IAAMpB,EAAUoB,EAAEP,OAAOQ,MACzBpB,KAAKC,SAAS,CAAEU,SAAUZ,IAC1BC,KAAKL,MAAMU,OAAON,GAClBC,KAAKkB,iB,+BAIL,OACE,yBAAKhB,UAAU,OACb,8BACE,8BACEmB,GAAG,WACHnB,UAAU,eACVa,MAAO,CACLO,OAAQ,OACRC,QAAS,OACTC,QAAS,GACTC,SAAU,UAEZL,MAAOpB,KAAKJ,MAAMe,SAClBe,SAAU1B,KAAK2B,kBAAkBpB,KAAKP,c,GArD3BS,IAAMC,WAgEvBF,E,mLAKOoB,GACTf,SAASC,eAAe,cAAce,UAAYD,I,0CAOlD5B,KAAKM,WAAWwB,IAAO9B,KAAKL,MAAMS,S,2CAOlCJ,KAAKM,WAAWwB,IAAO9B,KAAKL,MAAMS,S,+BAIlC,OACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,QACb,yBACEmB,GAAG,aACHnB,UAAU,YACVa,MAAO,CAAEgB,UAAW,a,GA9BNtB,IAAMC,WAuC1BsB,EAAU,CACd,yCACA,GACA,OACA,uBACA,0DACA,GACA,4OACA,GACA,OACA,WACA,2CACA,kCACA,GACA,OACA,8BACA,YACA,GACA,aACA,GACA,aACA,GACA,SACA,GACA,eACA,GACA,6BACA,iCACA,GACA,OACA,eACA,0BACA,GACA,OACA,YACA,6DACA,IACAC,KAAK,MAEPC,IAASC,OAAO,kBAACzC,EAAD,CAAKI,QAASkC,IAAanB,SAASC,eAAe,c","file":"static/js/main.10d3a503.chunk.js","sourcesContent":["import marked from \"marked\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // primary source of text\n    this.state = {\n      mainText: props.example\n    };\n  }\n\n  updateText(newText) {\n    this.setState({ mainText: newText });\n  }\n\n  render() {\n    return (\n      <div className='row'>\n        <TextEdit\n          text={this.state.mainText}\n          update={this.updateText.bind(this)}\n        />\n        <TextPreview text={this.state.mainText} />\n      </div>\n    );\n  }\n}\n\n/*\n * The area of text the user can edit.\n */\nclass TextEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // text source for editable area\n    this.state = {\n      textEdit: this.props.text\n    };\n  }\n\n  /*\n   * Set a minHeight value of 720px, as well as dynamically set the textarea height\n   * to the scroll height.\n   */\n  updateHeight() {\n    var target = document.getElementById(\"textEdit\");\n    target.style.height = \"720px\"; // minHeight\n    target.style.height = target.scrollHeight + \"px\";\n  }\n\n  /*\n   * Set the textarea height to the height of the example text.\n   */\n  componentDidMount() {\n    this.updateHeight();\n  }\n\n  /*\n   * Update this component's state, as well as update the parent state accordingly.\n   * Afterwards, update the height of the textarea.\n   * @param e   the event\n   */\n  updateTextHandler(e) {\n    const newText = e.target.value;\n    this.setState({ textEdit: newText });\n    this.props.update(newText);\n    this.updateHeight();\n  }\n\n  render() {\n    return (\n      <div className='col'>\n        <form>\n          <textarea\n            id='textEdit'\n            className='form-control'\n            style={{\n              resize: \"none\",\n              outline: \"none\",\n              padding: 20,\n              overflow: \"hidden\"\n            }}\n            value={this.state.textEdit}\n            onChange={this.updateTextHandler.bind(this)}\n          ></textarea>\n        </form>\n      </div>\n    );\n  }\n}\n\n/*\n * The area of text that renders the markdown text from the user input.\n */\nclass TextPreview extends React.Component {\n  /*\n   * Update the HTML of the rendered preview.\n   * @param t   HTML to update to\n   */\n  updateText(t) {\n    document.getElementById(\"markedText\").innerHTML = t;\n  }\n\n  /*\n   * Initial update of the example HTML.\n   */\n  componentDidMount() {\n    this.updateText(marked(this.props.text));\n  }\n\n  /*\n   * Update the HTML dynamically as the user types.\n   */\n  componentDidUpdate() {\n    this.updateText(marked(this.props.text));\n  }\n\n  render() {\n    return (\n      <div className='col'>\n        <div className='card'>\n          <div\n            id='markedText'\n            className='card-body'\n            style={{ minHeight: 720 }}\n          ></div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// example text to render initially\nconst EXAMPLE = [\n  \"# hello, This is Markdown Live Preview\",\n  \"\",\n  \"----\",\n  \"## what is Markdown?\",\n  \"see [Wikipedia](https://en.wikipedia.org/wiki/Markdown)\",\n  \"\",\n  '> Markdown is a lightweight markup language, originally created by John Gruber and Aaron Swartz allowing people \"to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML)\".',\n  \"\",\n  \"----\",\n  \"## usage\",\n  \"1. Write markdown text in this textarea.\",\n  \"2. Click 'HTML Preview' button.\",\n  \"\",\n  \"----\",\n  \"## markdown quick reference\",\n  \"# headers\",\n  \"\",\n  \"*emphasis*\",\n  \"\",\n  \"**strong**\",\n  \"\",\n  \"* list\",\n  \"\",\n  \">block quote\",\n  \"\",\n  \"    code (4 spaces indent)\",\n  \"[links](https://wikipedia.org)\",\n  \"\",\n  \"----\",\n  \"## changelog\",\n  \"* 17-Feb-2013 re-design\",\n  \"\",\n  \"----\",\n  \"## thanks\",\n  \"* [markdown-js](https://github.com/evilstreak/markdown-js)\",\n  \"\"\n].join(\"\\n\");\n\nReactDOM.render(<App example={EXAMPLE} />, document.getElementById(\"content\"));\n"],"sourceRoot":""}